{
	"info": {
		"_postman_id": "2f311ad1-8e92-407f-8e0a-bd256c9582e2",
		"name": "Integration testing",
		"description": "# ‚õìÔ∏è Get started here\n\nPostman allows you to test your APIs using simple Javascript code. You can evaluate your response body, headers, cookies, and more using the [ChaiJS BDD](https://www.chaijs.com/api/bdd/) syntax.\n\nThis template guides you through the process of setting up an integration test to ensure that all individual components of an API function together seamlessly.\n\nThe API under test in this collection includes three endpoints for registering and receiving a token, accessing your unique generated name, and unregistering a token:\n\n- POST `/register`\n- POST `/unregister`\n- GET `/my-name`\n    \n\nBy setting up requests in the order of the operation, we can test the flow of data to and from the endpoints and ensure they work together as expected. We also verify that the data persists between requests on the back end.\n\n## üîñ **How to use this template**\n\n**Step 1:** Check out the requests' documentation to learn more about -\n\n- what each request is meant to do.\n- the tests we've added against each one.\n    \n\n**Step 2:** Run this collection by clicking on \"Run\".\n\n<img src=\"https://content.pstmn.io/84019b0f-69c8-4c5f-98b9-2c90a6f9a0b1/Y29sbGVjdGlvbi1ydW5uZXItYnV0dG9uLmpwZWc=\" alt=\"\" height=\"103\" width=\"266\">\n\n**Step 3:** To customize this template, replace the request URLs with your API endpoints and add or edit the tests if needed.\n\n## ‚ÑπÔ∏è Resources\n\n[Scripting in Postman](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/)\n\n[Test script examples](https://learning.postman.com/docs/writing-scripts/script-references/test-examples/)\n\n[Postman Sandbox API reference](https://learning.postman.com/docs/sending-requests/grpc/postman-sandbox-api/#writing-assertions)\n\n[Using the Collection Runner](https://learning.postman.com/docs/collections/running-collections/intro-to-collection-runs/)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26162138",
		"_collection_link": "https://tectonicdev.postman.co/workspace/Tectonic~41def119-01bd-4f59-aae9-c19950bc7534/collection/26162138-2f311ad1-8e92-407f-8e0a-bd256c9582e2?action=share&source=collection_link&creator=26162138"
	},
	"item": [
		{
			"name": "Guild Create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"\r",
							"    // Store the guild_id parameter in a collection variable\r",
							"    pm.collectionVariables.set(\"guildId\", pm.request.url.query.get(\"guild_id\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/v1/guild?guild_id={{$randomPhoneNumberExt}}-{{$randomPhoneNumberExt}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"guild"
					],
					"query": [
						{
							"key": "guild_id",
							"value": "{{$randomPhoneNumberExt}}-{{$randomPhoneNumberExt}}"
						}
					]
				},
				"description": "Initialize a guild in our backend by unique guild Snowflake (ID)"
			},
			"response": [
				{
					"name": "OK",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/guild",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"guild"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"guild_id\": \"<string>\",\n  \"multiplier\": \"<integer>\",\n  \"pb_channel_id\": \"<string>\"\n}"
				}
			]
		},
		{
			"name": "Guild Update Channel",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"\r",
							"    // Store the pb_channel_id parameter in a collection variable\r",
							"    pm.collectionVariables.set(\"channelId\", pm.request.url.query.get(\"pb_channel_id\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/v1/guild/times?guild_id={{guildId}}&pb_channel_id={{$randomInt}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"guild",
						"times"
					],
					"query": [
						{
							"key": "guild_id",
							"value": "{{guildId}}"
						},
						{
							"key": "pb_channel_id",
							"value": "{{$randomInt}}"
						}
					]
				},
				"description": "Update a guild in our backend by unique guild Snowflake (ID)"
			},
			"response": [
				{
					"name": "OK",
					"originalRequest": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/guild",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"guild"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"guild_id\": \"<string>\",\n  \"multiplier\": \"<integer>\",\n  \"pb_channel_id\": \"<string>\"\n}"
				},
				{
					"name": "Created",
					"originalRequest": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/guild",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"guild"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"guild_id\": \"<string>\",\n  \"multiplier\": \"<integer>\",\n  \"pb_channel_id\": \"<string>\"\n}"
				},
				{
					"name": "Bad Request",
					"originalRequest": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/guild",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"guild"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"code\": \"<integer>\",\n  \"content\": \"<string>\",\n  \"error\": \"<string>\"\n}"
				},
				{
					"name": "Forbidden",
					"originalRequest": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/guild",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"guild"
							]
						}
					},
					"status": "Forbidden",
					"code": 403,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"code\": \"<integer>\",\n  \"content\": \"<string>\",\n  \"error\": \"<string>\"\n}"
				},
				{
					"name": "Not Found",
					"originalRequest": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/guild",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"guild"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"code\": \"<integer>\",\n  \"content\": \"<string>\",\n  \"error\": \"<string>\"\n}"
				},
				{
					"name": "Too Many Requests",
					"originalRequest": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/guild",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"guild"
							]
						}
					},
					"status": "Too Many Requests",
					"code": 429,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"code\": \"<integer>\",\n  \"content\": \"<string>\",\n  \"error\": \"<string>\"\n}"
				},
				{
					"name": "Internal Server Error",
					"originalRequest": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/guild",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"guild"
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"code\": \"<integer>\",\n  \"content\": \"<string>\",\n  \"error\": \"<string>\"\n}"
				}
			]
		},
		{
			"name": "Guild Update Multiplier",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"\r",
							"    // Store the multiplier parameter in a collection variable\r",
							"    pm.collectionVariables.set(\"multiplier\", pm.request.url.query.get(\"multiplier\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/v1/guild/multiplier?guild_id={{guildId}}&multiplier={{$randomInt}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"guild",
						"multiplier"
					],
					"query": [
						{
							"key": "guild_id",
							"value": "{{guildId}}"
						},
						{
							"key": "multiplier",
							"value": "{{$randomInt}}"
						}
					]
				},
				"description": "Update a guild in our backend by unique guild Snowflake (ID)"
			},
			"response": [
				{
					"name": "OK",
					"originalRequest": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/guild",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"guild"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"guild_id\": \"<string>\",\n  \"multiplier\": \"<integer>\",\n  \"pb_channel_id\": \"<string>\"\n}"
				},
				{
					"name": "Created",
					"originalRequest": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/guild",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"guild"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"guild_id\": \"<string>\",\n  \"multiplier\": \"<integer>\",\n  \"pb_channel_id\": \"<string>\"\n}"
				},
				{
					"name": "Bad Request",
					"originalRequest": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/guild",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"guild"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"code\": \"<integer>\",\n  \"content\": \"<string>\",\n  \"error\": \"<string>\"\n}"
				},
				{
					"name": "Forbidden",
					"originalRequest": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/guild",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"guild"
							]
						}
					},
					"status": "Forbidden",
					"code": 403,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"code\": \"<integer>\",\n  \"content\": \"<string>\",\n  \"error\": \"<string>\"\n}"
				},
				{
					"name": "Not Found",
					"originalRequest": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/guild",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"guild"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"code\": \"<integer>\",\n  \"content\": \"<string>\",\n  \"error\": \"<string>\"\n}"
				},
				{
					"name": "Too Many Requests",
					"originalRequest": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/guild",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"guild"
							]
						}
					},
					"status": "Too Many Requests",
					"code": 429,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"code\": \"<integer>\",\n  \"content\": \"<string>\",\n  \"error\": \"<string>\"\n}"
				},
				{
					"name": "Internal Server Error",
					"originalRequest": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/guild",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"guild"
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"code\": \"<integer>\",\n  \"content\": \"<string>\",\n  \"error\": \"<string>\"\n}"
				}
			]
		},
		{
			"name": "Guild Exists",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Guild_id is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.guild_id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Guild_id should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Multiplier is a non-negative integer\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.multiplier).to.exist;\r",
							"  pm.expect(responseData.multiplier).to.be.a('number');\r",
							"  pm.expect(responseData.multiplier).to.be.at.least(0);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains specified fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.all.keys('guild_id', 'multiplier', 'pb_channel_id');\r",
							"});\r",
							"\r",
							"pm.test(\"Pb_channel_id is a non-null string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.pb_channel_id).to.be.a('string').and.to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response contains specified fields - guild_id, multiplier, and pb_channel_id\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.include.all.keys('guild_id', 'multiplier', 'pb_channel_id');\r",
							"});\r",
							"\r",
							"pm.test(\"Guild multiplier is equal to the specified value\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    const expectation = parseInt(pm.collectionVariables.get(\"multiplier\"));\r",
							"\r",
							"    pm.expect(responseData.multiplier).to.equal(expectation);\r",
							"});\r",
							"\r",
							"pm.test(\"Pb_channel_id is equal to the specified value\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    const expectation = pm.collectionVariables.get(\"channelId\");\r",
							"    \r",
							"    pm.expect(responseData.pb_channel_id).to.equal(expectation);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/v1/guild?guild_id={{guildId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"guild"
					],
					"query": [
						{
							"key": "guild_id",
							"value": "{{guildId}}",
							"description": "Guild ID"
						}
					]
				},
				"description": "Get guild details by unique guild Snowflake (ID)"
			},
			"response": [
				{
					"name": "OK",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/guild?guild_id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"guild"
							],
							"query": [
								{
									"key": "guild_id",
									"value": "<string>",
									"description": "Guild ID"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"guild_id\": \"<string>\",\n  \"multiplier\": \"<integer>\",\n  \"pb_channel_id\": \"<string>\"\n}"
				}
			]
		},
		{
			"name": "User Create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"\r",
							"    // Store the guild_id parameter in a collection variable\r",
							"    pm.collectionVariables.set(\"userId\", pm.request.url.query.get(\"user_id\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "guild_id",
							"value": "tectonic",
							"type": "text"
						},
						{
							"key": "user_id",
							"value": "comfo",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}/v1/user?guild_id={{guildId}}&user_id={{$randomPhoneNumberExt}}-{{$randomPhoneNumberExt}}&rsn=Comfy hug",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"user"
					],
					"query": [
						{
							"key": "guild_id",
							"value": "{{guildId}}"
						},
						{
							"key": "user_id",
							"value": "{{$randomPhoneNumberExt}}-{{$randomPhoneNumberExt}}"
						},
						{
							"key": "rsn",
							"value": "Comfy hug"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "User Exists",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/v1/user?guild_id={{guildId}}&user_id={{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"user"
					],
					"query": [
						{
							"key": "rsn",
							"value": "Comfy hug",
							"disabled": true
						},
						{
							"key": "wom_id",
							"value": "39527",
							"disabled": true
						},
						{
							"key": "api_key",
							"value": "123",
							"disabled": true
						},
						{
							"key": "guild_id",
							"value": "{{guildId}}"
						},
						{
							"key": "user_id",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "RSN Exists",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.rsn).to.exist;\r",
							"        pm.expect(item.wom_id).to.exist;\r",
							"        pm.expect(item.user_id).to.exist;\r",
							"        pm.expect(item.guild_id).to.exist;\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Rsn is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.rsn).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/v1/rsn?guild_id={{guildId}}&user_id={{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"rsn"
					],
					"query": [
						{
							"key": "guild_id",
							"value": "{{guildId}}",
							"description": "Guild ID"
						},
						{
							"key": "user_id",
							"value": "{{userId}}"
						}
					]
				},
				"description": "Get RSN related details by unique guild and user Snowflake (ID)"
			},
			"response": [
				{
					"name": "OK",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/rsn?guild_id=<string>&user_id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"rsn"
							],
							"query": [
								{
									"key": "guild_id",
									"value": "<string>",
									"description": "Guild ID"
								},
								{
									"key": "user_id",
									"value": "<string>",
									"description": "User ID"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"guild_id\": \"<string>\",\n  \"points\": \"<integer>\",\n  \"user_id\": \"<string>\"\n}"
				},
				{
					"name": "Bad Request",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/rsn?guild_id=<string>&user_id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"rsn"
							],
							"query": [
								{
									"key": "guild_id",
									"value": "<string>",
									"description": "Guild ID"
								},
								{
									"key": "user_id",
									"value": "<string>",
									"description": "User ID"
								}
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"code\": \"<integer>\",\n  \"content\": \"<string>\",\n  \"error\": \"<string>\"\n}"
				},
				{
					"name": "Forbidden",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/rsn?guild_id=<string>&user_id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"rsn"
							],
							"query": [
								{
									"key": "guild_id",
									"value": "<string>",
									"description": "Guild ID"
								},
								{
									"key": "user_id",
									"value": "<string>",
									"description": "User ID"
								}
							]
						}
					},
					"status": "Forbidden",
					"code": 403,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"code\": \"<integer>\",\n  \"content\": \"<string>\",\n  \"error\": \"<string>\"\n}"
				},
				{
					"name": "Not Found",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/rsn?guild_id=<string>&user_id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"rsn"
							],
							"query": [
								{
									"key": "guild_id",
									"value": "<string>",
									"description": "Guild ID"
								},
								{
									"key": "user_id",
									"value": "<string>",
									"description": "User ID"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"code\": \"<integer>\",\n  \"content\": \"<string>\",\n  \"error\": \"<string>\"\n}"
				},
				{
					"name": "Too Many Requests",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/rsn?guild_id=<string>&user_id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"rsn"
							],
							"query": [
								{
									"key": "guild_id",
									"value": "<string>",
									"description": "Guild ID"
								},
								{
									"key": "user_id",
									"value": "<string>",
									"description": "User ID"
								}
							]
						}
					},
					"status": "Too Many Requests",
					"code": 429,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"code\": \"<integer>\",\n  \"content\": \"<string>\",\n  \"error\": \"<string>\"\n}"
				},
				{
					"name": "Internal Server Error",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/rsn?guild_id=<string>&user_id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"rsn"
							],
							"query": [
								{
									"key": "guild_id",
									"value": "<string>",
									"description": "Guild ID"
								},
								{
									"key": "user_id",
									"value": "<string>",
									"description": "User ID"
								}
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"code\": \"<integer>\",\n  \"content\": \"<string>\",\n  \"error\": \"<string>\"\n}"
				}
			]
		},
		{
			"name": "Leaderboard Exists",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response contains a 'users' array\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.users).to.be.an('array');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Guild_id in each user object is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.users).to.be.an('array');\r",
							"    \r",
							"    responseData.users.forEach(function(user) {\r",
							"        pm.expect(user.guild_id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Guild_id should be a non-empty string\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Points in each user object are non-negative integers\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.users).to.be.an('array');\r",
							"    responseData.users.forEach(function(user) {\r",
							"        pm.expect(user.points).to.be.a('number');\r",
							"        pm.expect(user.points).to.be.at.least(0);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"User IDs are non-empty strings\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.users).to.be.an('array');\r",
							"  responseData.users.forEach(function(user) {\r",
							"    pm.expect(user.user_id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"User ID should not be empty\");\r",
							"  });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/v1/leaderboard?guild_id={{guildId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"leaderboard"
					],
					"query": [
						{
							"key": "guild_id",
							"value": "{{guildId}}",
							"description": "Guild ID"
						}
					]
				},
				"description": "Get guilds leaderboard details by unique guild Snowflake (ID)"
			},
			"response": [
				{
					"name": "OK",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/leaderboard?guild_id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"leaderboard"
							],
							"query": [
								{
									"key": "guild_id",
									"value": "<string>",
									"description": "Guild ID"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"users\": [\n    {\n      \"guild_id\": \"<string>\",\n      \"points\": \"<integer>\",\n      \"user_id\": \"<string>\"\n    },\n    {\n      \"guild_id\": \"<string>\",\n      \"points\": \"<integer>\",\n      \"user_id\": \"<string>\"\n    }\n  ]\n}"
				},
				{
					"name": "Bad Request",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/leaderboard?guild_id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"leaderboard"
							],
							"query": [
								{
									"key": "guild_id",
									"value": "<string>",
									"description": "Guild ID"
								}
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"code\": \"<integer>\",\n  \"content\": \"<string>\",\n  \"error\": \"<string>\"\n}"
				},
				{
					"name": "Forbidden",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/leaderboard?guild_id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"leaderboard"
							],
							"query": [
								{
									"key": "guild_id",
									"value": "<string>",
									"description": "Guild ID"
								}
							]
						}
					},
					"status": "Forbidden",
					"code": 403,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"code\": \"<integer>\",\n  \"content\": \"<string>\",\n  \"error\": \"<string>\"\n}"
				},
				{
					"name": "Not Found",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/leaderboard?guild_id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"leaderboard"
							],
							"query": [
								{
									"key": "guild_id",
									"value": "<string>",
									"description": "Guild ID"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"code\": \"<integer>\",\n  \"content\": \"<string>\",\n  \"error\": \"<string>\"\n}"
				},
				{
					"name": "Too Many Requests",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/leaderboard?guild_id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"leaderboard"
							],
							"query": [
								{
									"key": "guild_id",
									"value": "<string>",
									"description": "Guild ID"
								}
							]
						}
					},
					"status": "Too Many Requests",
					"code": 429,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"code\": \"<integer>\",\n  \"content\": \"<string>\",\n  \"error\": \"<string>\"\n}"
				},
				{
					"name": "Internal Server Error",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/leaderboard?guild_id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"leaderboard"
							],
							"query": [
								{
									"key": "guild_id",
									"value": "<string>",
									"description": "Guild ID"
								}
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"code\": \"<integer>\",\n  \"content\": \"<string>\",\n  \"error\": \"<string>\"\n}"
				}
			]
		},
		{
			"name": "Users Exists",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response includes an array of users\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.users).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Each user object in the response contains required fields - user_id, guild_id, and points\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.users).to.be.an('array').that.is.not.empty;\r",
							"\r",
							"    responseData.users.forEach(function(user) {\r",
							"        pm.expect(user).to.include.all.keys('user_id', 'guild_id', 'points');\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Points are non-negative integers\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.users).to.be.an('array');\r",
							"    responseData.users.forEach(user => {\r",
							"        pm.expect(user.points).to.be.a('number');\r",
							"        pm.expect(user.points).to.be.at.least(0);\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/v1/users?guild_id={{guildId}}&user_ids={{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"users"
					],
					"query": [
						{
							"key": "guild_id",
							"value": "{{guildId}}",
							"description": "Guild ID"
						},
						{
							"key": "user_ids",
							"value": "{{userId}}",
							"description": "User IDs"
						}
					]
				},
				"description": "Get multiple users details by unique user Snowflakes (IDs)"
			},
			"response": [
				{
					"name": "OK",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/users?guild_id=<string>&user_ids=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"users"
							],
							"query": [
								{
									"key": "guild_id",
									"value": "<string>",
									"description": "Guild ID"
								},
								{
									"key": "user_ids",
									"value": "<string>",
									"description": "User IDs"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"users\": [\n    {\n      \"guild_id\": \"<string>\",\n      \"points\": \"<integer>\",\n      \"user_id\": \"<string>\"\n    },\n    {\n      \"guild_id\": \"<string>\",\n      \"points\": \"<integer>\",\n      \"user_id\": \"<string>\"\n    }\n  ]\n}"
				},
				{
					"name": "Bad Request",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/users?guild_id=<string>&user_ids=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"users"
							],
							"query": [
								{
									"key": "guild_id",
									"value": "<string>",
									"description": "Guild ID"
								},
								{
									"key": "user_ids",
									"value": "<string>",
									"description": "User IDs"
								}
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"code\": \"<integer>\",\n  \"content\": \"<string>\",\n  \"error\": \"<string>\"\n}"
				},
				{
					"name": "Forbidden",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/users?guild_id=<string>&user_ids=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"users"
							],
							"query": [
								{
									"key": "guild_id",
									"value": "<string>",
									"description": "Guild ID"
								},
								{
									"key": "user_ids",
									"value": "<string>",
									"description": "User IDs"
								}
							]
						}
					},
					"status": "Forbidden",
					"code": 403,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"code\": \"<integer>\",\n  \"content\": \"<string>\",\n  \"error\": \"<string>\"\n}"
				},
				{
					"name": "Not Found",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/users?guild_id=<string>&user_ids=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"users"
							],
							"query": [
								{
									"key": "guild_id",
									"value": "<string>",
									"description": "Guild ID"
								},
								{
									"key": "user_ids",
									"value": "<string>",
									"description": "User IDs"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"code\": \"<integer>\",\n  \"content\": \"<string>\",\n  \"error\": \"<string>\"\n}"
				},
				{
					"name": "Too Many Requests",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/users?guild_id=<string>&user_ids=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"users"
							],
							"query": [
								{
									"key": "guild_id",
									"value": "<string>",
									"description": "Guild ID"
								},
								{
									"key": "user_ids",
									"value": "<string>",
									"description": "User IDs"
								}
							]
						}
					},
					"status": "Too Many Requests",
					"code": 429,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"code\": \"<integer>\",\n  \"content\": \"<string>\",\n  \"error\": \"<string>\"\n}"
				},
				{
					"name": "Internal Server Error",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/users?guild_id=<string>&user_ids=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"users"
							],
							"query": [
								{
									"key": "guild_id",
									"value": "<string>",
									"description": "Guild ID"
								},
								{
									"key": "user_ids",
									"value": "<string>",
									"description": "User IDs"
								}
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"code\": \"<integer>\",\n  \"content\": \"<string>\",\n  \"error\": \"<string>\"\n}"
				}
			]
		},
		{
			"name": "Time Create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('time');\r",
							"    pm.expect(responseData).to.have.property('boss_name');\r",
							"    pm.expect(responseData).to.have.property('run_id');\r",
							"    pm.expect(responseData).to.have.property('date');\r",
							"    pm.expect(responseData).to.have.property('team');\r",
							"});\r",
							"\r",
							"pm.test(\"Time is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.time).to.be.a('number');\r",
							"    pm.expect(responseData.time).to.be.at.least(0);\r",
							"});\r",
							"\r",
							"pm.test(\"Team array is present and contains expected number of elements\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.team).to.exist.and.to.be.an('array');\r",
							"    pm.expect(responseData.team).to.have.lengthOf(1);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/v1/time?guild_id={{guildId}}&user_ids={{userId}}&time={{$randomInt}}&boss=vardorvis",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"time"
					],
					"query": [
						{
							"key": "guild_id",
							"value": "{{guildId}}"
						},
						{
							"key": "user_ids",
							"value": "{{userId}}"
						},
						{
							"key": "time",
							"value": "{{$randomInt}}"
						},
						{
							"key": "boss",
							"value": "vardorvis"
						}
					]
				},
				"description": "Add a new time to a guild in our backend by unique guild Snowflake (ID)"
			},
			"response": [
				{
					"name": "OK",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/time",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"time"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "<string>"
				},
				{
					"name": "Created",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/time",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"time"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "<string>"
				},
				{
					"name": "Bad Request",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/time",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"time"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"code\": \"<integer>\",\n  \"content\": \"<string>\",\n  \"error\": \"<string>\"\n}"
				},
				{
					"name": "Forbidden",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/time",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"time"
							]
						}
					},
					"status": "Forbidden",
					"code": 403,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"code\": \"<integer>\",\n  \"content\": \"<string>\",\n  \"error\": \"<string>\"\n}"
				},
				{
					"name": "Not Found",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/time",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"time"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"code\": \"<integer>\",\n  \"content\": \"<string>\",\n  \"error\": \"<string>\"\n}"
				},
				{
					"name": "Too Many Requests",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/time",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"time"
							]
						}
					},
					"status": "Too Many Requests",
					"code": 429,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"code\": \"<integer>\",\n  \"content\": \"<string>\",\n  \"error\": \"<string>\"\n}"
				},
				{
					"name": "Internal Server Error",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/time",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"time"
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"code\": \"<integer>\",\n  \"content\": \"<string>\",\n  \"error\": \"<string>\"\n}"
				}
			]
		},
		{
			"name": "User Delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/v1/user?guild_id={{guildId}}&user_id={{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"user"
					],
					"query": [
						{
							"key": "guild_id",
							"value": "{{guildId}}"
						},
						{
							"key": "user_id",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{Authorization}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "Authorization",
				"type": "string"
			},
			{
				"key": "in",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "guildId",
			"value": "",
			"type": "string"
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "channelId",
			"value": "",
			"type": "string"
		},
		{
			"key": "multiplier",
			"value": "",
			"type": "string"
		}
	]
}