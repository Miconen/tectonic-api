// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createGuild = `-- name: CreateGuild :one
INSERT INTO guilds (
  guild_id
) VALUES (
  $1
)
RETURNING guild_id, multiplier, pb_channel_id
`

func (q *Queries) CreateGuild(ctx context.Context, guildID string) (Guild, error) {
	row := q.db.QueryRow(ctx, createGuild, guildID)
	var i Guild
	err := row.Scan(&i.GuildID, &i.Multiplier, &i.PbChannelID)
	return i, err
}

const deleteGuild = `-- name: DeleteGuild :one
DELETE FROM guilds
WHERE guild_id = $1 RETURNING guild_id, multiplier, pb_channel_id
`

func (q *Queries) DeleteGuild(ctx context.Context, guildID string) (Guild, error) {
	row := q.db.QueryRow(ctx, deleteGuild, guildID)
	var i Guild
	err := row.Scan(&i.GuildID, &i.Multiplier, &i.PbChannelID)
	return i, err
}

const getGuild = `-- name: GetGuild :one
SELECT guild_id, multiplier, pb_channel_id FROM guilds
WHERE guild_id = $1 LIMIT 1
`

func (q *Queries) GetGuild(ctx context.Context, guildID string) (Guild, error) {
	row := q.db.QueryRow(ctx, getGuild, guildID)
	var i Guild
	err := row.Scan(&i.GuildID, &i.Multiplier, &i.PbChannelID)
	return i, err
}

const updateGuild = `-- name: UpdateGuild :one
UPDATE guilds SET
    multiplier = CASE WHEN $1::numeric IS NOT NULL AND $1::numeric != 0 THEN $1::numeric ELSE multiplier END,
    pb_channel_id = CASE WHEN $2::text IS NOT NULL AND $2::text != '' THEN $2::text ELSE pb_channel_id END
WHERE guild_id = $3 RETURNING guild_id, multiplier, pb_channel_id`

type UpdateGuildParams struct {
	Multiplier  int32 `json:"multiplier"`
	PbChannelID pgtype.Text `json:"pb_channel_id"`
	GuildID     string `json:"guild_id"`
}

func (q *Queries) UpdateGuild(ctx context.Context, arg UpdateGuildParams) (Guild, error) {
	row := q.db.QueryRow(ctx, updateGuild, arg.Multiplier, arg.PbChannelID, arg.GuildID)
	var i Guild
	err := row.Scan(&i.GuildID, &i.Multiplier, &i.PbChannelID)
	return i, err
}
