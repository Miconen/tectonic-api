// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package database

import (
	"context"
)

const updatePointsByEvent = `-- name: UpdatePointsByEvent :many
UPDATE users
SET points = points + (
	SELECT points
    FROM point_sources
    WHERE source = $1
    AND "point_sources"."guild_id" = $2
)
WHERE user_id = ANY($3::text[])
AND guild_id = $2 RETURNING user_id, guild_id, points
`

type UpdatePointsByEventParams struct {
	Event  string   `json:"event"`
	GuildID string   `json:"guild_id"`
	UserIDs []string `json:"user_ids"`
}

func (q *Queries) UpdatePointsByEvent(ctx context.Context, arg UpdatePointsByEventParams) ([]User, error) {
	rows, err := q.db.Query(ctx, updatePointsByEvent, arg.Event, arg.GuildID, arg.UserIDs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.UserID, &i.GuildID, &i.Points); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePointsCustom = `-- name: UpdatePointsCustom :many
UPDATE users
SET points = points + $1
WHERE user_id = ANY($2::text[])
AND guild_id = $3 RETURNING user_id, guild_id, points
`

type UpdatePointsCustomParams struct {
	Points  int32    `json:"points"`
	UserIDs []string `json:"user_ids"`
	GuildID string   `json:"guild_id"`
}

func (q *Queries) UpdatePointsCustom(ctx context.Context, arg UpdatePointsCustomParams) ([]User, error) {
	rows, err := q.db.Query(ctx, updatePointsCustom, arg.Points, arg.UserIDs, arg.GuildID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.UserID, &i.GuildID, &i.Points); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

