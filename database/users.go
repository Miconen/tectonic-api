// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package database

import (
	"context"
)

const getUsersById = `-- name: GetUsersById :many
SELECT users.user_id, users.guild_id, users.points
FROM users
WHERE users.guild_id = $1
AND users.user_id = ANY($2::text[])
`

type GetUsersByIdParams struct {
	GuildID string   `json:"guild_id"`
	UserIDs []string `json:"user_ids"`
}

func (q *Queries) GetUsersById(ctx context.Context, arg GetUsersByIdParams) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsersById, arg.GuildID, arg.UserIDs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.UserID, &i.GuildID, &i.Points); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersByRsn = `-- name: GetUsersByRsn :many
SELECT users.user_id, users.guild_id, users.points
FROM users
WHERE users.guild_id = $1
AND users.user_id IN (
    SELECT rsn.user_id
    FROM rsn
    WHERE rsn.guild_id = users.guild_id AND rsn.rsn = ANY($2::text[])
)
`

type GetUsersByRsnParams struct {
	GuildID string   `json:"guild_id"`
	RSNs []string `json:"rsns"`
}

func (q *Queries) GetUsersByRsn(ctx context.Context, arg GetUsersByRsnParams) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsersByRsn, arg.GuildID, arg.RSNs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.UserID, &i.GuildID, &i.Points); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersByWom = `-- name: GetUsersByWom :many
SELECT users.user_id, users.guild_id, users.points
FROM users
WHERE users.guild_id = $1
AND users.user_id IN (
    SELECT rsn.user_id
    FROM rsn
    WHERE rsn.guild_id = users.guild_id AND rsn.wom_id = ANY($2::text[])
)
`

type GetUsersByWomParams struct {
	GuildID string   `json:"guild_id"`
	WomIDs []string `json:"wom_ids"`
}

func (q *Queries) GetUsersByWom(ctx context.Context, arg GetUsersByWomParams) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsersByWom, arg.GuildID, arg.WomIDs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.UserID, &i.GuildID, &i.Points); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const deleteUserById = `-- name: DeleteUserById :exec
DELETE FROM users
WHERE users.guild_id = $1
AND users.user_id = $2
`

type DeleteUserByIdParams struct {
	GuildID string `json:"guild_id"`
	UserID  string `json:"user_id"`
}

func (q *Queries) DeleteUserById(ctx context.Context, arg DeleteUserByIdParams) error {
	_, err := q.db.Exec(ctx, deleteUserById, arg.GuildID, arg.UserID)
	return err
}

const deleteUserByRsn = `-- name: DeleteUserByRsn :exec
DELETE FROM users
WHERE users.guild_id = $1
AND users.user_id IN (
    SELECT rsn.user_id
    FROM rsn
    WHERE rsn.guild_id = users.guild_id AND rsn.rsn = $2
)
`

type DeleteUserByRsnParams struct {
	GuildID string `json:"guild_id"`
	Rsn     string `json:"rsn"`
}

func (q *Queries) DeleteUserByRsn(ctx context.Context, arg DeleteUserByRsnParams) error {
	_, err := q.db.Exec(ctx, deleteUserByRsn, arg.GuildID, arg.Rsn)
	return err
}

const deleteUserByWom = `-- name: DeleteUserByWom :exec
DELETE FROM users
WHERE users.guild_id = $1
AND users.user_id IN (
    SELECT rsn.user_id
    FROM rsn
    WHERE rsn.guild_id = users.guild_id AND rsn.wom_id = $2
)
`

type DeleteUserByWomParams struct {
	GuildID string `json:"guild_id"`
	WomID   string `json:"wom_id"`
}

func (q *Queries) DeleteUserByWom(ctx context.Context, arg DeleteUserByWomParams) error {
	_, err := q.db.Exec(ctx, deleteUserByWom, arg.GuildID, arg.WomID)
	return err
}

